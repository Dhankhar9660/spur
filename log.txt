============================= test session starts =============================
platform win32 -- Python 3.10.11, pytest-7.4.0, pluggy-1.2.0
rootdir: C:\Users\HP\PycharmProjects\spur-automations
plugins: html-3.2.0, metadata-3.0.0
collected 39 items / 6 deselected / 33 selected

Test\test_Charity_reg_page.py .                                          [  3%]
Test\test_Create_Exp.py .                                                [  6%]
Test\test_EP_register.py .                                               [  9%]
Test\test_Loginpage.py .........                                         [ 36%]
Test\test_UpdateProfile.py F                                             [ 39%]
Test\test_account.py .                                                   [ 42%]
Test\test_change_password.py FFFFFF                                      [ 60%]
Test\test_forgot_password.py .                                           [ 63%]
Test\test_friendrequest.py .                                             [ 66%]
Test\test_invitepartner.py .                                             [ 69%]
Test\test_prcie_filter.py ....                                           [ 81%]
Test\test_registry_page.py ...                                           [ 90%]
Test\test_update_honeymoon.py .                                          [ 93%]
Test\test_update_shipping.py .                                           [ 96%]
Test\test_url.py .                                                       [100%]

================================== FAILURES ===================================
_______________ Test_Update_Profile.test_update_profile[chrome] _______________

self = <Test.test_UpdateProfile.Test_Update_Profile object at 0x0000025CA26D2FE0>

    @pytest.mark.profile
    @pytest.mark.alltest
    @pytest.mark.regression
    def test_update_profile(self):
        self.update = LoginPage(self.driver)
        self.update.login(BasePage.COUPLE_EMAIL, BasePage.AUTOMATION_PASSWORD)
    
        self.update = UpdateProfile(self.driver)
        self.update.Update_Profile("QAtest", "user", 9876543210, "newpartner", "test", "partner11@yopmail.com",
                                   "Thanks for the visiting", "Hss", "New Jersey")
        time.sleep(3)
        self.update.refresh_page(self.update.driver)
        time.sleep(7)
        try:
            first_name = self.update.get_element_value(BasePage.First_Name)
            assert first_name == "QAtest"
    
        except AssertionError:
            print("first name is not updating")
            raise
    
        try:
            last_name = self.update.get_element_value(BasePage.Last_Name)
            assert last_name == "user"
    
        except AssertionError:
            print("last name is not updating")
            raise
    
        try:
            phone_number = self.update.get_element_value(BasePage.Phone_Number)
            assert phone_number == "98765 43210"
    
        except AssertionError:
            print("phone number is not updating")
            raise
    
        try:
            partner_first_name = self.update.get_element_value(BasePage.Partner_First_Name)
            assert partner_first_name == "newpartner"
    
        except AssertionError:
            print("partner_first_name is not updating")
            raise
    
        try:
            Partner_Last_Name = self.update.get_element_value(BasePage.Partner_Last_Name)
            assert Partner_Last_Name == "test"
    
        except AssertionError:
            print("Partner_Last_Name is not updating")
            raise
    
        # try:
        #     Partner_Email = self.update.get_element_value(BasePage.Partner_Email)
        #     print(Partner_Email)
        #     assert Partner_Email == "partner11@yopmail.com"
        #
        # except AssertionError:
        #     print("Partner_Email is not updating")
        #     raise
    
        # try:
        #     Wedding_Date = self.asd.get_element_value(BasePage.Wedding_Date)
        #     assert Wedding_Date == "July 6, 2023"
        #
        # except AssertionError:
        #     print("Wedding_Date is not updating")
        #     raise
    
        try:
            Greetings = self.update.get_element_value(BasePage.Greetings)
            assert Greetings == "Thanks for the visiting"
    
        except AssertionError:
            print("Greetings is not updating")
            raise
    
        try:
            Couple_Hashtag = self.update.get_element_value(BasePage.Couple_Hashtag)
>           assert Couple_Hashtag == "Hss"
E           AssertionError: assert 'Hs' == 'Hss'
E             - Hss
E             ?   -
E             + Hs

Test\test_UpdateProfile.py:93: AssertionError
---------------------------- Captured stdout call -----------------------------
Couple_Hashtag is not updating
_____________ Test_change_password.test_change_password_a[chrome] _____________

self = <Test.test_change_password.Test_change_password object at 0x0000025CA26FFD30>
request = <FixtureRequest for <Function test_change_password_a[chrome]>>

    @pytest.mark.changepassword
    @pytest.mark.alltest
    # ---test change password functionality without enter any information------
    def test_change_password_a(self, request):
    
        self.login = LoginPage(self.driver)
        self.login.login(BasePage.COUPLE_EMAIL, BasePage.AUTOMATION_PASSWORD)
    
        self.login = ChangePassword(self.driver)
>       self.login.Change_Password("", "", "")

Test\test_change_password.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Pages\ChangePassword.py:12: in Change_Password
    self.click_element(BasePage.Setting)
Pages\BasePage.py:233: in click_element
    WebDriverWait(self.driver, 20).until(EC.visibility_of_element_located(by_locator)).click()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.support.wait.WebDriverWait (session="1ff11c3157d210e120590f57a4f831e5")>
method = <function visibility_of_element_located.<locals>._predicate at 0x0000025CA2787520>
message = ''

    def until(self, method, message: str = ""):
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            time.sleep(self._poll)
            if time.monotonic() > end_time:
                break
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       	GetHandleVerifier [0x00FFCEB3+45171]
E       	(No symbol) [0x00F89101]
E       	(No symbol) [0x00E7BE1D]
E       	(No symbol) [0x00EAED40]
E       	(No symbol) [0x00EAF20B]
E       	(No symbol) [0x00EDF692]
E       	(No symbol) [0x00ECB094]
E       	(No symbol) [0x00EDDCFA]
E       	(No symbol) [0x00ECAE46]
E       	(No symbol) [0x00EA675E]
E       	(No symbol) [0x00EA78FD]
E       	GetHandleVerifier [0x012B54B9+2897529]
E       	GetHandleVerifier [0x012FDC6B+3194411]
E       	GetHandleVerifier [0x012F7A41+3169281]
E       	GetHandleVerifier [0x01086130+606960]
E       	(No symbol) [0x00F92E7C]
E       	(No symbol) [0x00F8F008]
E       	(No symbol) [0x00F8F12F]
E       	(No symbol) [0x00F81827]
E       	BaseThreadInitThunk [0x7555FCC9+25]
E       	RtlGetAppContainerNamedObjectPath [0x77657B1E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77657AEE+238]

..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\support\wait.py:95: TimeoutException
_____________ Test_change_password.test_change_password_b[chrome] _____________

self = <Test.test_change_password.Test_change_password object at 0x0000025CA26FF9D0>
request = <FixtureRequest for <Function test_change_password_b[chrome]>>

    @pytest.mark.changepassword
    @pytest.mark.alltest
    # -----test change password functionality without enter old password---------
    def test_change_password_b(self, request):
        self.login = LoginPage(self.driver)
>       self.login.login(BasePage.COUPLE_EMAIL, BasePage.AUTOMATION_PASSWORD)

Test\test_change_password.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Pages\LoginPage.py:15: in login
    self.click_element(BasePage.LOGIN_ICON)
Pages\BasePage.py:233: in click_element
    WebDriverWait(self.driver, 20).until(EC.visibility_of_element_located(by_locator)).click()
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:403: in _execute
    return self._parent.execute(command, params)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webdriver.py:440: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025CA2C74160>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...\n\\tRtlGetAppContainerNamedObjectPath [0x77657B1E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77657AEE+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-universal-cli-c117="" class="nav-link ng-star-inserted" href="/login">...</a> is not clickable at point (1030, 34). Other element would receive the click: <div _ngcontent-universal-cli-c124="" class="loader ng-star-inserted">...</div>
E         (Session info: chrome=117.0.5938.132)
E       Stacktrace:
E       	GetHandleVerifier [0x00FFCEB3+45171]
E       	(No symbol) [0x00F89101]
E       	(No symbol) [0x00E7BE1D]
E       	(No symbol) [0x00EB3B91]
E       	(No symbol) [0x00EB268F]
E       	(No symbol) [0x00EB0C7B]
E       	(No symbol) [0x00EB0015]
E       	(No symbol) [0x00EA856A]
E       	(No symbol) [0x00ECB04C]
E       	(No symbol) [0x00EA7FA6]
E       	(No symbol) [0x00ECB2C4]
E       	(No symbol) [0x00EDDCFA]
E       	(No symbol) [0x00ECAE46]
E       	(No symbol) [0x00EA675E]
E       	(No symbol) [0x00EA78FD]
E       	GetHandleVerifier [0x012B54B9+2897529]
E       	GetHandleVerifier [0x012FDC6B+3194411]
E       	GetHandleVerifier [0x012F7A41+3169281]
E       	GetHandleVerifier [0x01086130+606960]
E       	(No symbol) [0x00F92E7C]
E       	(No symbol) [0x00F8F008]
E       	(No symbol) [0x00F8F12F]
E       	(No symbol) [0x00F81827]
E       	BaseThreadInitThunk [0x7555FCC9+25]
E       	RtlGetAppContainerNamedObjectPath [0x77657B1E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77657AEE+238]

..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\errorhandler.py:245: ElementClickInterceptedException
_____________ Test_change_password.test_change_password_c[chrome] _____________

self = <Test.test_change_password.Test_change_password object at 0x0000025CA26FE260>
request = <FixtureRequest for <Function test_change_password_c[chrome]>>

    @pytest.mark.changepassword
    @pytest.mark.alltest
    def test_change_password_c(self,
                               request):  # test change password functionality with enter incorrect password into old password
        self.login = LoginPage(self.driver)
>       self.login.login(BasePage.COUPLE_EMAIL, BasePage.AUTOMATION_PASSWORD)

Test\test_change_password.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Pages\LoginPage.py:15: in login
    self.click_element(BasePage.LOGIN_ICON)
Pages\BasePage.py:233: in click_element
    WebDriverWait(self.driver, 20).until(EC.visibility_of_element_located(by_locator)).click()
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:403: in _execute
    return self._parent.execute(command, params)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webdriver.py:440: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025CA2C74160>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...\n\\tRtlGetAppContainerNamedObjectPath [0x77657B1E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77657AEE+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-universal-cli-c117="" class="nav-link ng-star-inserted" href="/login">...</a> is not clickable at point (1030, 34). Other element would receive the click: <div _ngcontent-universal-cli-c124="" class="loader ng-star-inserted">...</div>
E         (Session info: chrome=117.0.5938.132)
E       Stacktrace:
E       	GetHandleVerifier [0x00FFCEB3+45171]
E       	(No symbol) [0x00F89101]
E       	(No symbol) [0x00E7BE1D]
E       	(No symbol) [0x00EB3B91]
E       	(No symbol) [0x00EB268F]
E       	(No symbol) [0x00EB0C7B]
E       	(No symbol) [0x00EB0015]
E       	(No symbol) [0x00EA856A]
E       	(No symbol) [0x00ECB04C]
E       	(No symbol) [0x00EA7FA6]
E       	(No symbol) [0x00ECB2C4]
E       	(No symbol) [0x00EDDCFA]
E       	(No symbol) [0x00ECAE46]
E       	(No symbol) [0x00EA675E]
E       	(No symbol) [0x00EA78FD]
E       	GetHandleVerifier [0x012B54B9+2897529]
E       	GetHandleVerifier [0x012FDC6B+3194411]
E       	GetHandleVerifier [0x012F7A41+3169281]
E       	GetHandleVerifier [0x01086130+606960]
E       	(No symbol) [0x00F92E7C]
E       	(No symbol) [0x00F8F008]
E       	(No symbol) [0x00F8F12F]
E       	(No symbol) [0x00F81827]
E       	BaseThreadInitThunk [0x7555FCC9+25]
E       	RtlGetAppContainerNamedObjectPath [0x77657B1E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77657AEE+238]

..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\errorhandler.py:245: ElementClickInterceptedException
_____________ Test_change_password.test_change_password_d[chrome] _____________

self = <Test.test_change_password.Test_change_password object at 0x0000025CA26FF8E0>
request = <FixtureRequest for <Function test_change_password_d[chrome]>>

    @pytest.mark.changepassword
    @pytest.mark.alltest
    # test change password functionality with enter diffrent password into new password and confirm password
    def test_change_password_d(self, request):
        self.login = LoginPage(self.driver)
>       self.login.login(BasePage.COUPLE_EMAIL, BasePage.AUTOMATION_PASSWORD)

Test\test_change_password.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Pages\LoginPage.py:15: in login
    self.click_element(BasePage.LOGIN_ICON)
Pages\BasePage.py:233: in click_element
    WebDriverWait(self.driver, 20).until(EC.visibility_of_element_located(by_locator)).click()
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:403: in _execute
    return self._parent.execute(command, params)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webdriver.py:440: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025CA2C74160>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...\n\\tRtlGetAppContainerNamedObjectPath [0x77657B1E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77657AEE+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-universal-cli-c117="" class="nav-link ng-star-inserted" href="/login">...</a> is not clickable at point (1030, 34). Other element would receive the click: <div _ngcontent-universal-cli-c124="" class="loader ng-star-inserted">...</div>
E         (Session info: chrome=117.0.5938.132)
E       Stacktrace:
E       	GetHandleVerifier [0x00FFCEB3+45171]
E       	(No symbol) [0x00F89101]
E       	(No symbol) [0x00E7BE1D]
E       	(No symbol) [0x00EB3B91]
E       	(No symbol) [0x00EB268F]
E       	(No symbol) [0x00EB0C7B]
E       	(No symbol) [0x00EB0015]
E       	(No symbol) [0x00EA856A]
E       	(No symbol) [0x00ECB04C]
E       	(No symbol) [0x00EA7FA6]
E       	(No symbol) [0x00ECB2C4]
E       	(No symbol) [0x00EDDCFA]
E       	(No symbol) [0x00ECAE46]
E       	(No symbol) [0x00EA675E]
E       	(No symbol) [0x00EA78FD]
E       	GetHandleVerifier [0x012B54B9+2897529]
E       	GetHandleVerifier [0x012FDC6B+3194411]
E       	GetHandleVerifier [0x012F7A41+3169281]
E       	GetHandleVerifier [0x01086130+606960]
E       	(No symbol) [0x00F92E7C]
E       	(No symbol) [0x00F8F008]
E       	(No symbol) [0x00F8F12F]
E       	(No symbol) [0x00F81827]
E       	BaseThreadInitThunk [0x7555FCC9+25]
E       	RtlGetAppContainerNamedObjectPath [0x77657B1E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77657AEE+238]

..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\errorhandler.py:245: ElementClickInterceptedException
_____________ Test_change_password.test_change_password_e[chrome] _____________

self = <Test.test_change_password.Test_change_password object at 0x0000025CA26FF700>
request = <FixtureRequest for <Function test_change_password_e[chrome]>>

    @pytest.mark.changepassword
    @pytest.mark.alltest
    # ----------------------------------test password combination------------------------------
    def test_change_password_e(self, request):
        self.login = LoginPage(self.driver)
>       self.login.login(BasePage.COUPLE_EMAIL, BasePage.AUTOMATION_PASSWORD)

Test\test_change_password.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Pages\LoginPage.py:15: in login
    self.click_element(BasePage.LOGIN_ICON)
Pages\BasePage.py:233: in click_element
    WebDriverWait(self.driver, 20).until(EC.visibility_of_element_located(by_locator)).click()
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:403: in _execute
    return self._parent.execute(command, params)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webdriver.py:440: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025CA2C74160>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...\n\\tRtlGetAppContainerNamedObjectPath [0x77657B1E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77657AEE+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-universal-cli-c117="" class="nav-link ng-star-inserted" href="/login">...</a> is not clickable at point (1030, 34). Other element would receive the click: <div _ngcontent-universal-cli-c124="" class="loader ng-star-inserted">...</div>
E         (Session info: chrome=117.0.5938.132)
E       Stacktrace:
E       	GetHandleVerifier [0x00FFCEB3+45171]
E       	(No symbol) [0x00F89101]
E       	(No symbol) [0x00E7BE1D]
E       	(No symbol) [0x00EB3B91]
E       	(No symbol) [0x00EB268F]
E       	(No symbol) [0x00EB0C7B]
E       	(No symbol) [0x00EB0015]
E       	(No symbol) [0x00EA856A]
E       	(No symbol) [0x00ECB04C]
E       	(No symbol) [0x00EA7FA6]
E       	(No symbol) [0x00ECB2C4]
E       	(No symbol) [0x00EDDCFA]
E       	(No symbol) [0x00ECAE46]
E       	(No symbol) [0x00EA675E]
E       	(No symbol) [0x00EA78FD]
E       	GetHandleVerifier [0x012B54B9+2897529]
E       	GetHandleVerifier [0x012FDC6B+3194411]
E       	GetHandleVerifier [0x012F7A41+3169281]
E       	GetHandleVerifier [0x01086130+606960]
E       	(No symbol) [0x00F92E7C]
E       	(No symbol) [0x00F8F008]
E       	(No symbol) [0x00F8F12F]
E       	(No symbol) [0x00F81827]
E       	BaseThreadInitThunk [0x7555FCC9+25]
E       	RtlGetAppContainerNamedObjectPath [0x77657B1E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77657AEE+238]

..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\errorhandler.py:245: ElementClickInterceptedException
_____________ Test_change_password.test_change_password_f[chrome] _____________

self = <Test.test_change_password.Test_change_password object at 0x0000025CA26FF550>
request = <FixtureRequest for <Function test_change_password_f[chrome]>>

    @pytest.mark.changepassword
    @pytest.mark.alltest
    @pytest.mark.regression
    # ----------test change password functionality with valid information----------------
    def test_change_password_f(self, request):
        self.login = LoginPage(self.driver)
>       self.login.login(BasePage.COUPLE_EMAIL, BasePage.AUTOMATION_PASSWORD)

Test\test_change_password.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Pages\LoginPage.py:15: in login
    self.click_element(BasePage.LOGIN_ICON)
Pages\BasePage.py:233: in click_element
    WebDriverWait(self.driver, 20).until(EC.visibility_of_element_located(by_locator)).click()
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webelement.py:403: in _execute
    return self._parent.execute(command, params)
..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\webdriver.py:440: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025CA2C74160>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...\n\\tRtlGetAppContainerNamedObjectPath [0x77657B1E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77657AEE+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-universal-cli-c117="" class="nav-link ng-star-inserted" href="/login">...</a> is not clickable at point (1030, 34). Other element would receive the click: <div _ngcontent-universal-cli-c124="" class="loader ng-star-inserted">...</div>
E         (Session info: chrome=117.0.5938.132)
E       Stacktrace:
E       	GetHandleVerifier [0x00FFCEB3+45171]
E       	(No symbol) [0x00F89101]
E       	(No symbol) [0x00E7BE1D]
E       	(No symbol) [0x00EB3B91]
E       	(No symbol) [0x00EB268F]
E       	(No symbol) [0x00EB0C7B]
E       	(No symbol) [0x00EB0015]
E       	(No symbol) [0x00EA856A]
E       	(No symbol) [0x00ECB04C]
E       	(No symbol) [0x00EA7FA6]
E       	(No symbol) [0x00ECB2C4]
E       	(No symbol) [0x00EDDCFA]
E       	(No symbol) [0x00ECAE46]
E       	(No symbol) [0x00EA675E]
E       	(No symbol) [0x00EA78FD]
E       	GetHandleVerifier [0x012B54B9+2897529]
E       	GetHandleVerifier [0x012FDC6B+3194411]
E       	GetHandleVerifier [0x012F7A41+3169281]
E       	GetHandleVerifier [0x01086130+606960]
E       	(No symbol) [0x00F92E7C]
E       	(No symbol) [0x00F8F008]
E       	(No symbol) [0x00F8F12F]
E       	(No symbol) [0x00F81827]
E       	BaseThreadInitThunk [0x7555FCC9+25]
E       	RtlGetAppContainerNamedObjectPath [0x77657B1E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77657AEE+238]

..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\selenium\webdriver\remote\errorhandler.py:245: ElementClickInterceptedException
============================== warnings summary ===============================
Test\test_Charity_reg_page.py:20
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Charity_reg_page.py:20: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Charity_reg_page.py:21
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Charity_reg_page.py:21: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_Charity_reg_page.py:22
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Charity_reg_page.py:22: PytestUnknownMarkWarning: Unknown pytest.mark.signup - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.signup

Test\test_Create_Exp.py:16
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Create_Exp.py:16: PytestUnknownMarkWarning: Unknown pytest.mark.createxp - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.createxp

Test\test_Create_Exp.py:17
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Create_Exp.py:17: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_EP_register.py:19
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_EP_register.py:19: PytestUnknownMarkWarning: Unknown pytest.mark.signup - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.signup

Test\test_EP_register.py:20
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_EP_register.py:20: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_EP_register.py:21
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_EP_register.py:21: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_Loginpage.py:20
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:20: PytestUnknownMarkWarning: Unknown pytest.mark.login - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.login

Test\test_Loginpage.py:21
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:21: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Loginpage.py:54
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:54: PytestUnknownMarkWarning: Unknown pytest.mark.login - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.login

Test\test_Loginpage.py:55
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:55: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_Loginpage.py:56
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:56: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Loginpage.py:114
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:114: PytestUnknownMarkWarning: Unknown pytest.mark.login - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.login

Test\test_Loginpage.py:115
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:115: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_Loginpage.py:116
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:116: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Loginpage.py:174
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:174: PytestUnknownMarkWarning: Unknown pytest.mark.login - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.login

Test\test_Loginpage.py:175
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:175: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_Loginpage.py:176
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:176: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Loginpage.py:234
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:234: PytestUnknownMarkWarning: Unknown pytest.mark.login - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.login

Test\test_Loginpage.py:235
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:235: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Loginpage.py:236
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:236: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_Loginpage.py:294
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:294: PytestUnknownMarkWarning: Unknown pytest.mark.login - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.login

Test\test_Loginpage.py:295
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:295: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Loginpage.py:357
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:357: PytestUnknownMarkWarning: Unknown pytest.mark.login - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.login

Test\test_Loginpage.py:358
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:358: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Loginpage.py:359
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:359: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_Loginpage.py:420
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:420: PytestUnknownMarkWarning: Unknown pytest.mark.login - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.login

Test\test_Loginpage.py:421
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:421: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_Loginpage.py:422
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:422: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Loginpage.py:482
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:482: PytestUnknownMarkWarning: Unknown pytest.mark.login - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.login

Test\test_Loginpage.py:483
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:483: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_Loginpage.py:484
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_Loginpage.py:484: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_UpdateProfile.py:13
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_UpdateProfile.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.profile - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.profile

Test\test_UpdateProfile.py:14
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_UpdateProfile.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_UpdateProfile.py:15
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_UpdateProfile.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_account.py:13
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_account.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.account - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.account

Test\test_account.py:14
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_account.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_booking.py:14
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_booking.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.smoke

Test\test_booking.py:15
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_booking.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_booking.py:16
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_booking.py:16: PytestUnknownMarkWarning: Unknown pytest.mark.booking - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.booking

Test\test_change_password.py:14
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.changepassword - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.changepassword

Test\test_change_password.py:15
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_change_password.py:55
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:55: PytestUnknownMarkWarning: Unknown pytest.mark.changepassword - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.changepassword

Test\test_change_password.py:56
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:56: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_change_password.py:87
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:87: PytestUnknownMarkWarning: Unknown pytest.mark.changepassword - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.changepassword

Test\test_change_password.py:88
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:88: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_change_password.py:120
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:120: PytestUnknownMarkWarning: Unknown pytest.mark.changepassword - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.changepassword

Test\test_change_password.py:121
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:121: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_change_password.py:153
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:153: PytestUnknownMarkWarning: Unknown pytest.mark.changepassword - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.changepassword

Test\test_change_password.py:154
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:154: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_change_password.py:191
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:191: PytestUnknownMarkWarning: Unknown pytest.mark.changepassword - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.changepassword

Test\test_change_password.py:192
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:192: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_change_password.py:193
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_change_password.py:193: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_cms.py:21
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_cms.py:21: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.smoke

Test\test_forgot_password.py:23
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_forgot_password.py:23: PytestUnknownMarkWarning: Unknown pytest.mark.forgotpassword - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.forgotpassword

Test\test_forgot_password.py:24
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_forgot_password.py:24: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_forgot_password.py:25
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_forgot_password.py:25: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_friendrequest.py:16
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_friendrequest.py:16: PytestUnknownMarkWarning: Unknown pytest.mark.friendrequest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.friendrequest

Test\test_friendrequest.py:17
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_friendrequest.py:17: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_invitepartner.py:13
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_invitepartner.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.partner - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.partner

Test\test_invitepartner.py:14
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_invitepartner.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_order.py:19
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_order.py:19: PytestUnknownMarkWarning: Unknown pytest.mark.alltesta - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltesta

Test\test_order.py:20
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_order.py:20: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_order.py:21
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_order.py:21: PytestUnknownMarkWarning: Unknown pytest.mark.plceorder - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.plceorder

Test\test_partiallypurchase.py:16
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_partiallypurchase.py:16: PytestUnknownMarkWarning: Unknown pytest.mark.patial_purchase - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.patial_purchase

Test\test_partiallypurchase.py:17
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_partiallypurchase.py:17: PytestUnknownMarkWarning: Unknown pytest.mark.alltes - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltes

Test\test_prcie_filter.py:15
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_prcie_filter.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.pricefilter - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.pricefilter

Test\test_prcie_filter.py:16
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_prcie_filter.py:16: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_prcie_filter.py:17
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_prcie_filter.py:17: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_prcie_filter.py:76
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_prcie_filter.py:76: PytestUnknownMarkWarning: Unknown pytest.mark.pricefilter - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.pricefilter

Test\test_prcie_filter.py:77
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_prcie_filter.py:77: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_prcie_filter.py:133
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_prcie_filter.py:133: PytestUnknownMarkWarning: Unknown pytest.mark.pricefilter - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.pricefilter

Test\test_prcie_filter.py:134
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_prcie_filter.py:134: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_prcie_filter.py:190
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_prcie_filter.py:190: PytestUnknownMarkWarning: Unknown pytest.mark.pricefilter - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.pricefilter

Test\test_prcie_filter.py:191
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_prcie_filter.py:191: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_registry_page.py:22
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_registry_page.py:22: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_registry_page.py:23
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_registry_page.py:23: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_registry_page.py:24
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_registry_page.py:24: PytestUnknownMarkWarning: Unknown pytest.mark.registry - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.registry

Test\test_registry_page.py:64
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_registry_page.py:64: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_registry_page.py:65
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_registry_page.py:65: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_registry_page.py:66
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_registry_page.py:66: PytestUnknownMarkWarning: Unknown pytest.mark.addbucket - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.addbucket

Test\test_registry_page.py:106
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_registry_page.py:106: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_registry_page.py:107
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_registry_page.py:107: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_registry_page.py:108
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_registry_page.py:108: PytestUnknownMarkWarning: Unknown pytest.mark.guestview - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.guestview

Test\test_ticket_page.py:16
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_ticket_page.py:16: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.smoke

Test\test_ticket_page.py:17
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_ticket_page.py:17: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.regression

Test\test_ticket_page.py:18
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_ticket_page.py:18: PytestUnknownMarkWarning: Unknown pytest.mark.loginsignup - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.loginsignup

Test\test_update_honeymoon.py:15
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_update_honeymoon.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.honeymoon - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.honeymoon

Test\test_update_honeymoon.py:16
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_update_honeymoon.py:16: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_update_shipping.py:13
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_update_shipping.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.shipping - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.shipping

Test\test_update_shipping.py:14
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_update_shipping.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test\test_url.py:13
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_url.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.copyurl - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.copyurl

Test\test_url.py:14
  C:\Users\HP\PycharmProjects\spur-automations\Test\test_url.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.alltest - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.alltest

Test/test_Charity_reg_page.py: 1 warning
Test/test_Create_Exp.py: 1 warning
Test/test_EP_register.py: 1 warning
Test/test_Loginpage.py: 1 warning
Test/test_UpdateProfile.py: 1 warning
Test/test_account.py: 1 warning
Test/test_change_password.py: 1 warning
Test/test_forgot_password.py: 1 warning
Test/test_friendrequest.py: 1 warning
Test/test_invitepartner.py: 1 warning
Test/test_prcie_filter.py: 1 warning
Test/test_registry_page.py: 1 warning
Test/test_update_honeymoon.py: 1 warning
Test/test_update_shipping.py: 1 warning
Test/test_url.py: 1 warning
  C:\Users\HP\PycharmProjects\spur-automations\Test\conftest.py:31: DeprecationWarning: use options instead of chrome_options
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), chrome_options=chrome_options)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
- generated html file: file:///C:/Users/HP/PycharmProjects/spur-automations/Reports/1695976597.html -
=========================== short test summary info ===========================
FAILED Test/test_UpdateProfile.py::Test_Update_Profile::test_update_profile[chrome]
FAILED Test/test_change_password.py::Test_change_password::test_change_password_a[chrome]
FAILED Test/test_change_password.py::Test_change_password::test_change_password_b[chrome]
FAILED Test/test_change_password.py::Test_change_password::test_change_password_c[chrome]
FAILED Test/test_change_password.py::Test_change_password::test_change_password_d[chrome]
FAILED Test/test_change_password.py::Test_change_password::test_change_password_e[chrome]
FAILED Test/test_change_password.py::Test_change_password::test_change_password_f[chrome]
==== 7 failed, 26 passed, 6 deselected, 109 warnings in 1497.50s (0:24:57) ====
